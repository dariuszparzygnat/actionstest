name: 'Deploy db as container'

on:
  workflow_dispatch:
    inputs:
      postfix:
        description: 'The part of the name that will be use to identify resource group and container'
        required: true
      containerversion:
        description: 'Container version. Default: latest'
        required: false
      containername:
        description: 'Container name. Default: empty'
        required: false
      location:
        description: 'Where resource group and container will be located. Default: west europe'

env:
  azure_location: ${{ github.event.inputs.location == '' && 'west europe' ||  github.event.inputs.location  }} 

jobs:
  create_infrastructure_azure:
    name: 'Create resource group on Azure'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download_deploy_file
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/terraform/resourcegroup/deploy.tf?sv=${{ secrets.ACCOUNT_SAS }}'
        
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download_var_file
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/terraform/resourcegroup/variables.tf?sv=${{ secrets.ACCOUNT_SAS }}'
    
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        terraform plan -var="postfix=${{ github.event.inputs.postfix }}"

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply      
      run: |
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        terraform apply -var="postfix=${{ github.event.inputs.postfix }}" -auto-approve

  deploy_db:
    needs: [create_infrastructure_azure]
    uses: Workbook/WorkBook.Infrastructure/.github/workflows/deploy_db_reusable.yml@master
    with: 
      withresourcegroupname: ${{format('wbtest{0}', github.event.inputs.postfix)}}
      withcontainerinstancename: ${{format('wbdbcontainer{0}', github.event.inputs.postfix)}}
      withdbcontainerversion: ${{github.event.inputs.containerversion}}
      withdbcontainername: ${{github.event.inputs.containername}}
      # withregion: ${{env.azure_location}}
    secrets:
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}