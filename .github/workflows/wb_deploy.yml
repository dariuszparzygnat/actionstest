name: 'WB deploy'

on:
  workflow_dispatch:
    inputs:
      buildnumber:
        description: 'Build number'
        required: true
      withappinsights:
        description: 'If app insights needed, then true'
        required: false
      withsql:
        description: 'If sql needed, then true'
        required: false
      withdeploy:
        description: 'If app deploy is not needed, then false'
        required: false

env:
  AZURE_WEBAPP_PACKAGE_PATH: '.' 

jobs:
  create_infrastructure_azure:
    name: 'Create infrastructure on Azure'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download_deploy_file
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/terraform/deploy.tf?sv=${{ secrets.ACCOUNT_SAS }}'
        
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download_var_file
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/terraform/variables.tf?sv=${{ secrets.ACCOUNT_SAS }}'
    
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        terraform plan -var="buildnumber=${{ github.event.inputs.buildnumber }}"

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply      
      run: |
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        terraform apply -var="buildnumber=${{ github.event.inputs.buildnumber }}" -auto-approve
  
  create_app_insights:
    if: github.event.inputs.withappinsights == 'true'
    name: 'Create app insights on Azure'
    runs-on: ubuntu-latest
    needs: [create_infrastructure_azure]

    outputs:
      ik: ${{ steps.getting_ik.outputs.instrumentationkey }}
    defaults:
      run:
        shell: bash

    steps:
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download_deploy_file
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/terraform/appinsights/deploy.tf?sv=${{ secrets.ACCOUNT_SAS }}'
        
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download_var_file
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/terraform/appinsights/variables.tf?sv=${{ secrets.ACCOUNT_SAS }}'
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Apply      
      run: |
        export ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}
        export ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}
        export ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}
        export ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
        terraform apply -var="buildnumber=${{ github.event.inputs.buildnumber }}" -auto-approve
    - name: Set instrumentation key
      id: getting_ik
      run: echo "::set-output name=instrumentationkey::$(terraform output application_insights_instrumentation_key)"

  deploy_db:
    if: github.event.inputs.withsql == 'true'
    needs: [create_infrastructure_azure]
    uses: dariuszparzygnat/actionstest/.github/workflows/deploy_db_reusable.yml@master
    with: 
      withresourcegroumname: ${{format('wbtest{0}', github.event.inputs.buildnumber)}}
      withcontainerinstancename: ${{format('wbdbcontainer{0}', github.event.inputs.buildnumber)}}
      withdbcontainerversion: ${{github.event.inputs.containerversion}}
      withdbcontainername: ${{github.event.inputs.containername}}
      # withregion: ${{env.azure_location}}
    secrets:
      DB_USERID: ${{ secrets.DB_USERID }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      
  deploy_app:
    if: github.event.inputs.withdeploy != 'false'
    name: 'Deploy on Azure'
    runs-on: ubuntu-latest
    needs: [create_infrastructure_azure]
    
    defaults:
      run:
        shell: bash

    steps:     
    - name: Download a file
      uses: carlosperate/download-file-action@v1.0.3
      id: download-artifact
      with:
        file-url: 'https://${{ secrets.ACCOUNT_NAME }}.blob.core.windows.net/artifacts/DpTest/DpTest_DeployTest/${{ github.event.inputs.buildnumber }}/WorkBookv9.zip?sv=${{ secrets.ACCOUNT_SAS }}'
    - name: Azure Login
      uses: azure/login@v1
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: 'wbtest${{ github.event.inputs.buildnumber }}'
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/WorkBookv9.zip'
    - name: 'Virtual path settings'
      run: |
        az resource update --name 'wbtest${{ github.event.inputs.buildnumber }}/config/web' --resource-group 'wbtest${{ github.event.inputs.buildnumber }}' --resource-type 'Microsoft.Web/sites/config' --set 'properties.virtualApplications=[{"virtualPath":"\/","physicalPath":"site\\wwwroot","virtualDirectories":null},{"virtualPath":"\/api","physicalPath":"site\\wwwroot\\api","virtualDirectories":null,"preloadEnabled":true},{"virtualPath":"\/report","physicalPath":"site\\wwwroot\\report","virtualDirectories":null,"preloadEnabled":true}]'
  
  add_instrumentation_key:
    name: 'Add ik to settings'
    runs-on: ubuntu-latest
    needs: [create_app_insights, deploy_app]
    
    defaults:
      run:
        shell: bash
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}   
    - name: Add ik setting
      run: |
        az webapp config appsettings set -g 'wbtest${{ github.event.inputs.buildnumber }}' -n 'wbtest${{ github.event.inputs.buildnumber }}' --settings APPINSIGHTS_INSTRUMENTATIONKEY=${{needs.create_app_insights.outputs.ik}}  
  
  add_connection_string:
   name: 'Add connection string to app'
   runs-on: ubuntu-latest
   needs: [deploy_db, deploy_app]
   
   defaults:
     run:
      shell: bash
   steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}   
    - name: Add connection string to appsettings
      run: |
       az webapp config connection-string set -g 'wbtest${{ github.event.inputs.buildnumber }}' -t SQLAzure -n 'wbtest${{ github.event.inputs.buildnumber }}' --settings Connectionstring="Server=tcp:wbtestsqlserver${{ github.event.inputs.buildnumber }}.database.windows.net,1433;Initial Catalog=wbtestsqldatabase${{ github.event.inputs.buildnumber }};Persist Security Info=False;User ID=${{secrets.DB_USERID}};Password=${{secrets.DB_PASSWORD}};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;"
       
